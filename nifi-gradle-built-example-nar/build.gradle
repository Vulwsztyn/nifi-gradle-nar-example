description = 'An example project on how to use Gradle to build NiFi ARchive projects (NARs)'

// Populate these if your NAR has a parent NAR
def narDependencyGroup = 'org.apache.nifi'
def narParentName = 'nifi-standard-services-api-nar'
def narParentVersion = project.version

dependencies {
    apiElements(group: narDependencyGroup, name: narParentName, version: narParentVersion) {
        artifact {
            name = narParentName
            type = 'nar'
        }
    }
    compile project(':nifi-gradle-built-example-processors')
}

jar {
    jar.extension = 'nar'
    manifest {
        attributes(
                'Build-Revision': getWorkingRevision() ?: 'unknown',
                'Build-Branch': getWorkingBranch() ?: 'unknown',
                'Build-Tag': getWorkingTag(),
                'Build-Timestamp': new Date().toString(),
                'Built-By': System.properties['user.name'] ?: 'unknown',
                'Nar-Dependency-Group': narDependencyGroup,
                'Nar-Parent-Id': narParentName,
                'Nar-Parent-Version': narParentVersion,
                'Created-By': "Gradle ${gradle.gradleVersion}",
                'Build-Jdk': "Groovy ${GroovySystem.version}"
        )
    }
}

def getWorkingBranch() {
    return "git rev-parse --abbrev-ref HEAD".execute().text.trim()
}

def getWorkingRevision() {
    return "git rev-parse HEAD".execute().text.trim()
}

def getWorkingTag() {
    def workingTag = "git describe"
    def result = workingTag.execute()
    def resultText = result.text
    return (result.exitValue() == 0) ? resultText.trim() : 'HEAD'
}